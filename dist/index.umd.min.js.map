{"version":3,"file":"index.umd.min.js","sources":["../src/utils/index.ts","../src/useMerge/index.ts","../src/useMemoState/index.ts"],"sourcesContent":["export const isObject = (value: unknown) => value !== null && typeof value === 'object' && !Array.isArray(value);\r\nexport const isArray = (value: unknown) => Array.isArray(value);\r\nexport const isFunction = (value: unknown) => typeof value === 'function';\r\nexport const isString = (value: unknown) => typeof value === 'string';\r\nexport const isBoolean = (value: unknown) => typeof value === 'boolean';\r\nexport const isNumber = (value: unknown) => typeof value === 'number';\r\nexport const isUndef = (value: unknown) => typeof value === 'undefined';\r\n\r\nexport function isTypeSame(param1: unknown, param2: unknown) {\r\n    let same = false;\r\n    switch (true) {\r\n        case isObject(param1):\r\n            same = isObject(param2);\r\n            break;\r\n        case isArray(param1):\r\n            same = isArray(param2);\r\n            break;\r\n        case isFunction(param1):\r\n            same = isFunction(param2);\r\n            break;\r\n        case isString(param1):\r\n            same = isString(param2);\r\n            break;\r\n        case isBoolean(param1):\r\n            same = isBoolean(param2);\r\n            break;\r\n        case isNumber(param1):\r\n            same = isNumber(param2);\r\n            break;\r\n        case isUndef(param1):\r\n            same = isUndef(param2);\r\n            break;\r\n    }\r\n    return same;\r\n}","import { isArray, isBoolean, isFunction, isNumber, isObject, isString, isTypeSame, isUndef } from \"../utils\";\r\n\r\nfunction mergeObject(param1: Record<string | number, any>, param2: Record<string | number, any>) {\r\n    let mergeParams = { ...param1 };\r\n    for (let key in param2) {\r\n        if (!isTypeSame(mergeParams[key], param2[key])) {\r\n            mergeParams[key] = param2[key];\r\n        } else if (isObject(mergeParams[key])) {\r\n            mergeParams[key] = mergeObject(mergeParams[key], param2[key]);\r\n        } else if (isArray(mergeParams[key])) {\r\n            mergeParams[key] = [...mergeParams[key], ...param2[key]];\r\n        } else {\r\n            mergeParams[key] = param2[key];\r\n        }\r\n    }\r\n    return mergeParams;\r\n}\r\n\r\nexport default function useMerge(param1: any, param2: any): any {\r\n    if (!isTypeSame(param1, param2) &&\r\n        !isFunction(param1) && !isFunction(param2)\r\n    ) return param1;\r\n    let _merged, _param1 = param1, _param2 = param2;\r\n    if (isFunction(param1)) {\r\n        _param1 = param1();\r\n    }\r\n    if (isFunction(param2)) {\r\n        _param2 = param2();\r\n    }\r\n    switch (true) {\r\n        case isObject(_param1):\r\n            _merged = mergeObject(_param1, _param2);\r\n            break;\r\n\r\n        case isArray(_param1):\r\n            _merged = [..._param1, ..._param2];\r\n            break;\r\n\r\n        default:\r\n            _merged = _param2;\r\n            break;\r\n    }\r\n    return _merged;\r\n}","import { useState, useRef, Dispatch, SetStateAction } from 'react'\r\nimport useMerge from \"../useMerge\";\r\n\r\n\r\nexport default function useMemoState<T>(params: T | (() => T)): [T, Dispatch<SetStateAction<T>>, (arg0: any) => void] {\r\n    const { current: initalState } = useRef(params);\r\n    const [state, setState] = useState(initalState);\r\n    const { current: resetState } = useRef((otherParams: any) => {\r\n        if (otherParams) {\r\n            setState(useMerge(initalState, otherParams));\r\n        } else {\r\n            setState(initalState);\r\n        }\r\n    });\r\n    return [state, setState, resetState];\r\n}"],"names":["isObject","value","_typeof","Array","isArray","isFunction","isString","isBoolean","isNumber","isUndef","isTypeSame","param1","param2","same","mergeObject","mergeParams","_objectSpread","key","concat","_toConsumableArray","useMerge","_merged","_param1","_param2","params","initalState","useRef","current","_useState2","_slicedToArray","useState","state","setState","_useRef2","otherParams"],"mappings":"2hFAAO,IAAMA,EAAW,SAACC,GAAc,OAAe,OAAVA,GAAmC,WAAjBC,EAAOD,KAAuBE,MAAMC,QAAQH,EAAM,EACnGG,EAAU,SAACH,GAAc,OAAKE,MAAMC,QAAQH,EAAM,EAClDI,EAAa,SAACJ,GAAc,MAAsB,mBAAVA,CAAoB,EAC5DK,EAAW,SAACL,GAAc,MAAsB,iBAAVA,CAAkB,EACxDM,EAAY,SAACN,GAAc,MAAsB,kBAAVA,CAAmB,EAC1DO,EAAW,SAACP,GAAc,MAAsB,iBAAVA,CAAkB,EACxDQ,EAAU,SAACR,GAAc,YAAsB,IAAVA,CAAqB,EAEhE,SAASS,EAAWC,EAAiBC,GACxC,IAAIC,GAAO,EACX,QAAQ,GACJ,KAAKb,EAASW,GACVE,EAAOb,EAASY,GAChB,MACJ,KAAKR,EAAQO,GACTE,EAAOT,EAAQQ,GACf,MACJ,KAAKP,EAAWM,GACZE,EAAOR,EAAWO,GAClB,MACJ,KAAKN,EAASK,GACVE,EAAOP,EAASM,GAChB,MACJ,KAAKL,EAAUI,GACXE,EAAON,EAAUK,GACjB,MACJ,KAAKJ,EAASG,GACVE,EAAOL,EAASI,GAChB,MACJ,KAAKH,EAAQE,GACTE,EAAOJ,EAAQG,GAGvB,OAAOC,CACX,CChCA,SAASC,EAAYH,EAAsCC,GACvD,IAAIG,iWAAWC,IAAQL,GACvB,IAAK,IAAIM,KAAOL,EAIRG,EAAYE,GAHXP,EAAWK,EAAYE,GAAML,EAAOK,IAE9BjB,EAASe,EAAYE,IACTH,EAAYC,EAAYE,GAAML,EAAOK,IACjDb,EAAQW,EAAYE,OACXC,OAAAC,EAAOJ,EAAYE,IAAIE,EAAKP,EAAOK,KAEhCL,EAAOK,GANPL,EAAOK,GASlC,OAAOF,CACX,CAEe,SAASK,EAAST,EAAaC,GAC1C,IAAKF,EAAWC,EAAQC,KACnBP,EAAWM,KAAYN,EAAWO,GACrC,OAAOD,EACT,IAAIU,EAASC,EAAUX,EAAQY,EAAUX,EAOzC,OANIP,EAAWM,KACXW,EAAUX,KAEVN,EAAWO,KACXW,EAAUX,MAEN,GACJ,KAAKZ,EAASsB,GACVD,EAAUP,EAAYQ,EAASC,GAC/B,MAEJ,KAAKnB,EAAQkB,GACTD,KAAOH,OAAAC,EAAOG,GAAOH,EAAKI,IAC1B,MAEJ,QACIF,EAAUE,EAGlB,OAAOF,CACX,gBCvCe,SAAyBG,GACpC,IAAiBC,EAAgBC,SAAOF,GAAhCG,QACuCC,EAAAC,EAArBC,WAASL,MAA5BM,EAAKH,KAAEI,EAAQJ,KACtBK,EAAgCP,UAAO,SAACQ,GAEhCF,EADAE,EACSd,EAASK,EAAaS,GAEtBT,MAGjB,MAAO,CAACM,EAAOC,EAPYC,EAAnBN,QAQZ"}